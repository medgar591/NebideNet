library(usethis)
edit_r_environ()
library(usethis)
use_github(protocol = "https")
library(MATH4753EDGAR)
y <- 1:10
MATH4753EDGAR::myfirstfun(y)
knitr::opts_chunk$set(echo = TRUE)
sqrt(8600/(15*10^(-9)))
sqrt(86400/(15*10^(-9)))
sqrt(86400/(15*10^(-9)))
yvals = 15*(2:20)^2
yvals
sqrt(86400/(15*10^(-9)))
yvals = 15*(2:20)^2
lineplot(yvals)
sqrt(86400/(15*10^(-9)))
yvals = 15*(2:20)^2
plot(2:20, yvals, type = "l")
sqrt(86400/(15*10^(-9)))
Time = 15*(2:20)^2
plot(2:20, Time, type = "l", xlab = "")
install.packages(c("boot", "broom", "cli", "cpp11", "crayon", "dbplyr", "dplyr", "fastmap", "forcats", "gert", "ggthemes", "htmltools", "IRdisplay", "knitr", "Lahman", "matrixStats", "MCMCpack", "memoise", "quantreg", "rappdirs", "repr", "reprex", "RSQLite", "shiny", "systemfonts", "tibble", "withr"))
install.packages(c("boot", "broom", "cli", "cpp11", "crayon", "dbplyr", "dplyr", "fastmap", "forcats", "gert", "ggthemes", "htmltools", "IRdisplay", "knitr", "Lahman", "matrixStats", "MCMCpack", "memoise", "quantreg", "rappdirs", "repr", "reprex", "RSQLite", "shiny", "systemfonts", "tibble", "withr"))
install.packages(c("boot", "broom", "cli", "cpp11", "crayon", "dbplyr", "dplyr", "fastmap", "forcats", "gert", "ggthemes", "htmltools", "IRdisplay", "knitr", "Lahman", "matrixStats", "MCMCpack", "memoise", "quantreg", "rappdirs", "repr", "reprex", "RSQLite", "shiny", "systemfonts", "tibble", "withr"))
knitr::opts_chunk$set(echo = TRUE)
cuberoot(86400/(8*10^(-9)))
(86400/(8*10^(-9)))^(1/3)
(86400/(8*10^(-9)))^(1/3)
plot(2:20, 8*(2:20)^3, type = "l", xlab = "n", ylab = "T(n)")
log2(86400/(8*10^(-9)))
log2(86400/(8*10^(-9)))
plot(2:20, 2^(2:20), type = "l", xlab = "n", ylab = "T(n)")
log2(86400/(10^(-9)))
plot(2:20, 2^(2:20), type = "l", xlab = "n", ylab = "T(n)")
log2(86400/(10^(-9)))
plot(2:20, 2^(2:20), type = "l", xlab = "n", ylab = "T(n)")
log(86400/(10^(-9)), 3)
log(86400/(10^(-9)), 3)
plot(2:20, 3^(2:20), type = "l", xlab = "n", ylab = "T(n)")
log(86400/(10^(-9)), 3)
plot(2:20, 3^(2:20), type = "l", xlab = "n", ylab = "T(n)")
factorial(10)
factorial(10) > (86400*10^(9))
factorial(20) > (86400*10^(9))
factorial(15) > (86400*10^(9))
factorial(17) > (86400*10^(9))
factorial(15) > (86400*10^(9))
factorial(15) >= (86400*10^(9))
factorial(15) > (86400*10^(9))
factorial(16) > (86400*10^(9))
plot(2:20, factorial(2:20), type = "l", xlab = "n", ylab = "T(n)")
(15*log2(15)) > (86400*10^(9))
(2400000*log2(2400000)) > (86400*10^(9))
(3000000*log2(3000000)) > (86400*10^(9))
(10000000*log2(10000000)) > (86400*10^(9))
(50000000*log2(50000000)) > (86400*10^(9))
(5*10^9*log2(5*10^9)) > (86400*10^(9))
(5*10^10*log2(5*10^10)) > (86400*10^(9))
(5*10^11*log2(5*10^11)) > (86400*10^(9))
(5*10^20*log2(5*10^20)) > (86400*10^(9))
(5*10^15*log2(5*10^15)) > (86400*10^(9))
(5*10^13*log2(5*10^13)) > (86400*10^(9))
(5*10^12*log2(5*10^12)) > (86400*10^(9))
(5*10^11*log2(5*10^11)) > (86400*10^(9))
(10*10^11*log2(10*10^11)) > (86400*10^(9))
(20*10^11*log2(20*10^11)) > (86400*10^(9))
(50*10^11*log2(50*10^11)) > (86400*10^(9))
(40*10^11*log2(40*10^11)) > (86400*10^(9))
(30*10^11*log2(30*10^11)) > (86400*10^(9))
(25*10^11*log2(25*10^11)) > (86400*10^(9))
(24*10^11*log2(24*10^11)) > (86400*10^(9))
(23*10^11*log2(23*10^11)) > (86400*10^(9))
(22*10^11*log2(22*10^11)) > (86400*10^(9))
(21*10^11*log2(21*10^11)) > (86400*10^(9))
val  = 21*10^11
(val*log2(val)) > (86400*10^(9))
val  = 22*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.5*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.4*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.2*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.2*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.15*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.11*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.105*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.101*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.102*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.103*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.104*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1035*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1036*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1038*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10375*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10374*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10372*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10373*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.103725*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.103728*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.103727*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037275*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037274*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037273*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10372735*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10372738*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.10372739*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037274*10^11
(val*log2(val)) > (86400*10^(9))
val  = 21.1037273*10^11
(val*log2(val)) > (86400*10^(9))
(21.1037273*10^11*log2(21.1037273*10^11)) > (86400*10^(9))
(21.1037274*10^11*log2(21.1037274*10^11)) > (86400*10^(9))
(21.1037273*10^11*log2(21.1037273*10^11)) > (86400*10^(9))
(21.1037274*10^11*log2(21.1037274*10^11)) > (86400*10^(9))
vals <- 2:20
plot(2:20, vals*log2(vals), type = "l", xlab = "n", ylab = "T(n)")
(21.1037273*10^11*log2(21.1037273*10^11)) > (86400*10^(9))
(21.1037274*10^11*log2(21.1037274*10^11)) > (86400*10^(9))
vals <- 2:20
plot(2:20, 2:20*log2(2:20), type = "l", xlab = "n", ylab = "T(n)")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE, out.width = "300px", dpi = 120)
factorial(15) > (86400*10^(9))
factorial(16) > (86400*10^(9))
plot(2:20, factorial(2:20), type = "l", xlab = "n", ylab = "T(n)")
factorial(16) > (86400*10^(9))
factorial(17) > (86400*10^(9))
plot(2:20, factorial(2:20), type = "l", xlab = "n", ylab = "T(n)")
factorial(16) > (86400*10^(9))
factorial(17) > (86400*10^(9))
plot(2:20, factorial(2:20), type = "l", xlab = "n", ylab = "T(n)")
knitr::opts_chunk$set(echo = TRUE)
plot(2:50, (2:50)^2/2 - (2:50)/2, type = "l", xlab = "n", ylab = "T(n)")
plot(2:50, ((2:50)^2)/2 - (2:50)/2, type = "l", xlab = "n", ylab = "T(n)")
3/4*(2:50)^2
1/4*(2:50)^2
((2:50)^2)/2 - (2:50)/2
library(ggplot2)
lines <- data.frame(f1=3/4*(2:50)^2, f2=1/4*(2:50)^2, tn=((2:50)^2)/2 - (2:50)/2)
lines
library(ggplot2)
lines <- data.frame(f1=3/4*(2:50)^2, f2=1/4*(2:50)^2, tn=((2:50)^2)/2 - (2:50)/2)
ggplot(data = data, aes(x=x, y=value)) + geom_line(aes(colour=variable))
library(ggplot2)
lines <- data.frame(f1=3/4*(2:50)^2, f2=1/4*(2:50)^2, tn=((2:50)^2)/2 - (2:50)/2)
ggplot(data = lines, aes(x=x, y=value)) + geom_line(aes(colour=variable))
library(ggplot2)
lines <- data.frame(f1=3/4*(2:50)^2, f2=1/4*(2:50)^2, tn=((2:50)^2)/2 - (2:50)/2)
ggplot(data = lines, aes(x=x, y=value)) + geom_line(aes())
library(ggplot2)
lines <- data.frame(n=rep(2:50, 3),
values=c(3/4*(2:50)^2, 1/4*(2:50)^2, ((2:50)^2)/2 - (2:50)/2),
functions= rep(c("f1","f2","t(n)"), each=49))
ggplot(data = lines, aes(x=n, y=values)) + geom_line(aes())
library(ggplot2)
lines <- data.frame(n=rep(2:50, 3),
values=c(3/4*(2:50)^2, 1/4*(2:50)^2, ((2:50)^2)/2 - (2:50)/2),
functions= rep(c("f1","f2","t(n)"), each=49))
ggplot(data = lines, aes(x=n, y=values)) + geom_line(aes(colour=functions))
setwd("~/OneDrive/Documents/Coding/NebideNet")
data <- read.csv("testStats.csv")
head(data)
data.df <- read.csv("testStats.csv")
head(data)
summary(data)
with(data.df, plot(PgS~PgNS))
with(data.df, plot(PgNS~PgS, ylab= "Positive rate of Non-Sensitive groups", xlab="Positive rate of Sensitive groups"))
with(data.df, plot(PgNS~PgS, ylab= "Positive rate of Non-Sensitive groups", xlab="Positive rate of Sensitive groups"))
abline(0,1)
with(data.df, plot(PgNS~PgS, ylab= "Positive rate of Non-Sensitive groups", xlab="Positive rate of Sensitive groups"))
abline(0,1, col="Green")
with(data.df, plot(PgNS~PgS, ylab= "Positive rate of Non-Sensitive groups", xlab="Positive rate of Sensitive groups"))
abline(0,1, col="Blue")
with(data.df, plot(PgNS~PgS, ylab= "Positive rate of Non-Sensitive groups", xlab="Positive rate of Sensitive groups"))
abline(0,1.25,col="Blue")
abline(0,0.8, col="Blue")
boxplot(data.df$Parity)
boxplot(data.df$Parity, horizontal=TRUE)
boxplot(data.df$Parity, horizontal=TRUE)
boxplot(subset(data.df)$Parity, horizontal=TRUE)
data.df <- read.csv("testStats.csv")
head(data)
boxplot(data.df$Parity, horizontal=TRUE)
boxplot(subset(data.df, PgS>0&&PgNS>0&&PgS<1&&PgNS<1 )$Parity, horizontal=TRUE)
boxplot(data.df$Parity, horizontal=TRUE)
temp <- subset(data.df, PgS>0&&PgNS>0&&PgS<1&&PgNS<1)
boxplot(subset(data.df, PgS>0&&PgNS>0&&PgS<1&&PgNS<1 )$Parity, horizontal=TRUE)
boxplot(data.df$Parity, horizontal=TRUE)
temp <- subset(data.df, PgS>0&&PgNS>0&&PgS<1&&PgNS<1)
boxplot(temp$Parity, horizontal=TRUE)
boxplot(data.df$Parity, horizontal=TRUE)
temp <- data.df[(PgS>0)&&(PgNS>0)&&(PgS<1)&&(PgNS<1)]
boxplot(data.df$Parity, horizontal=TRUE)
temp <- data.df[(PgS>0)&&(PgNS>0)&&(PgS<1)&&(PgNS<1)]
boxplot(data.df$Parity, horizontal=TRUE)
temp <- data.df[with(data.df, (PgS>0)&&(PgNS>0)&&(PgS<1)&&(PgNS<1)) ]
head(temp)
boxplot(data.df$Parity, horizontal=TRUE)
temp <- data.df[with(data.df, (PgS>0)&&(PgNS>0)&&(PgS<1)&&(PgNS<1)) ]
temp
boxplot(data.df$Parity, horizontal=TRUE)
boxplot(data.df$Parity, horizontal=TRUE)
hist(data.df$Parity)
hist(data.df$MeanScore)
hist(data.df$MeanScore, breaks = 20)
boxplot(data.df$Parity, horizontal=TRUE)
hist(data.df$Parity, breaks=20)
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Ratio, breaks = 20)
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Median, breaks = 20)
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Median, breaks = 20)
data.df.filtered <- data.df[(data.df$PgS > 0)]
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Median, breaks = 20)
data.df.filtered <- subset(data.df, PgS>0)
hist(data.df.filtered, breaks = 20)
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Median, breaks = 20)
data.df.filtered <- subset(data.df, PgS>0, select = C("PgS", "PgNS", "Parity", "Ratio", "Median", "MeanScore", "DeviationScore"))
hist(data.df$MeanScore, breaks = 20)
hist(data.df$Median, breaks = 20)
data.df[data.df$Median != 0]
